JavaScript读书笔记
网址：https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000

一 . JavaScript简介 

网景公司于1995年发布JavaScript；
ECMAScript 是标准, JavaScript是具体实现；
ES6 于2015.6发布。

二 . 快速入门

JavaScript代码可以直接嵌在网页的任何地方，不过通常我们都把JavaScript代码放到<head>中：
由<script>...</script>包含的代码就是JavaScript代码，它将直接被浏览器执行。
第二种方法是把JavaScript代码放到一个单独的.js文件，然后在HTML中通过<script src="..."></script>引入这个文件：
把JavaScript代码放入一个单独的.js文件中更利于维护代码，并且多个页面可以各自引用同一份.js文件。

1、基本语法：语法（;结尾）；注释（//）；大小写（区分）。	

2、数据类型和变量：
  Number：JavaScript不区分整数和浮点数，统一用Number表示，Number可以直接做四则运算，规则和数学一致。

  字符串：字符串是以单引号'或双引号"括起来的任意文本。

  布尔值：布尔值和布尔代数的表示完全一致。

  null和undefined：null表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符串，而null表示“空”。
在其他语言中，也有类似JavaScript的null的表示，例如Java也用null，Swift用nil，Python用None表示。但是，在JavaScript中，
还有一个和null类似的undefined，它表示“未定义”。JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。
事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。

  数组：数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。数组用[]表示，元素之间用,分隔。
另一种创建数组的方法是通过Array()函数实现。数组的元素可以通过索引来访问。请注意，索引的起始值为0。

  对象：JavaScript的对象是一组由键-值组成的无序集合。

  变量：申明一个变量用var语句，要显示变量x的内容，可以用console.log(x)。

  strict模式：JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：
如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量。数据类型和变量
阅读: 312520
数据类型
计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在JavaScript中定义了以下几种数据类型：

Number
JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：

123; // 整数123
0.456; // 浮点数0.456
1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5
-99; // 负数
NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示
Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity
计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等，它们和十进制表示的数值完全一样。

Number可以直接做四则运算，规则和数学一致：

1 + 2; // 3
(1 + 2) * 5 / 2; // 7.5
2 / 0; // Infinity
0 / 0; // NaN
10 % 3; // 1
10.5 % 3; // 1.5
注意%是求余运算。

字符串
字符串是以单引号'或双引号"括起来的任意文本，比如'abc'，"xyz"等等。请注意，''或""本身只是一种表示方式，不是字符串的一部分，因此，字符串'abc'只有a，b，c这3个字符。

布尔值
布尔值和布尔代数的表示完全一致，一个布尔值只有true、false两种值，要么是true，要么是false，可以直接用true、false表示布尔值，也可以通过布尔运算计算出来：

true; // 这是一个true值
false; // 这是一个false值
2 > 1; // 这是一个true值
2 >= 3; // 这是一个false值
&&运算是与运算，只有所有都为true，&&运算结果才是true：

true && true; // 这个&&语句计算结果为true
true && false; // 这个&&语句计算结果为false
false && true && false; // 这个&&语句计算结果为false
||运算是或运算，只要其中有一个为true，||运算结果就是true：

false || false; // 这个||语句计算结果为false
true || false; // 这个||语句计算结果为true
false || true || false; // 这个||语句计算结果为true
!运算是非运算，它是一个单目运算符，把true变成false，false变成true：

! true; // 结果为false
! false; // 结果为true
! (2 > 5); // 结果为true
布尔值经常用在条件判断中，比如：

var age = 15;
if (age >= 18) {
    alert('adult');
} else {
    alert('teenager');
}
比较运算符
当我们对Number做比较时，可以通过比较运算符得到一个布尔值：

2 > 5; // false
5 >= 2; // true
7 == 7; // true
实际上，JavaScript允许对任意数据类型做比较：

false == 0; // true
false === 0; // false
要特别注意相等运算符==。JavaScript在设计时，有两种比较运算符：

第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；

第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。

由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。

另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：

NaN === NaN; // false
唯一能判断NaN的方法是通过isNaN()函数：

isNaN(NaN); // true
最后要注意浮点数的相等比较：

1 / 3 === (1 - 2 / 3); // false
这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：

Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true
null和undefined
null表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符串，而null表示“空”。

在其他语言中，也有类似JavaScript的null的表示，例如Java也用null，Swift用nil，Python用None表示。但是，在JavaScript中，还有一个和null类似的undefined，它表示“未定义”。

JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。

数组
数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：

[1, 2, 3.14, 'Hello', null, true];
上述数组包含6个元素。数组用[]表示，元素之间用,分隔。

另一种创建数组的方法是通过Array()函数实现：

new Array(1, 2, 3); // 创建了数组[1, 2, 3]
然而，出于代码的可读性考虑，强烈建议直接使用[]。

数组的元素可以通过索引来访问。请注意，索引的起始值为0：

var arr = [1, 2, 3.14, 'Hello', null, true];
arr[0]; // 返回索引为0的元素，即1
arr[5]; // 返回索引为5的元素，即true
arr[6]; // 索引超出了范围，返回undefined
对象
JavaScript的对象是一组由键-值组成的无序集合，例如：

var person = {
    name: 'Bob',
    age: 20,
    tags: ['js', 'web', 'mobile'],
    city: 'Beijing',
    hasCar: true,
    zipcode: null
};
JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述person对象一共定义了6个键值对，其中每个键又称为对象的属性，例如，person的name属性为'Bob'，zipcode属性为null。

要获取一个对象的属性，我们用对象变量.属性名的方式：

person.name; // 'Bob'
person.zipcode; // null
变量
变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。

变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、$和_的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如if、while等。申明一个变量用var语句，比如：

var a; // 申明了变量a，此时a的值为undefined
var $b = 1; // 申明了变量$b，同时给$b赋值，此时$b的值为1
var s_007 = '007'; // s_007是一个字符串
var Answer = true; // Answer是一个布尔值true
var t = null; // t的值是null
变量名也可以用中文，但是，请不要给自己找麻烦。

在JavaScript中，使用等号=对变量进行赋值。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次，例如：

var a = 123; // a的值是整数123
a = 'ABC'; // a变为字符串
这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下：

int a = 123; // a是整数类型变量，类型用int申明
a = "ABC"; // 错误：不能把字符串赋给整型变量
和静态语言相比，动态语言更灵活，就是这个原因。

请不要把赋值语句的等号等同于数学的等号。比如下面的代码：

var x = 10;
x = x + 2;
如果从数学上理解x = x + 2那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式x + 2，得到结果12，再赋给变量x。由于x之前的值是10，重新赋值后，x的值变成12。

要显示变量的内容，可以用console.log(x)，打开Chrome的控制台就可以看到结果。

// 打印变量x

var person = {
    name: 'Bob',
    age: 20,
    tags: ['js', 'web', 'mobile'],
    city: 'Beijing',
    hasCar: true,
    zipcode: null
};
console.log(person.name); // 'Bob
console.log(person.hasCar); // 'Bob
 Run
Bob
true
使用console.log()代替alert()的好处是可以避免弹出烦人的对话框。

strict模式
JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：
如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量：
i = 10; // i现在是全局变量 
在同一个页面的不同的JavaScript文件中，如果都不用var申明，恰好都使用了变量i，将造成变量i互相影响，产生难以调试的错误结果。
使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。
为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，
未使用var申明变量就使用的，将导致运行错误。启用strict模式的方法是在JavaScript代码的第一行写上：
'use strict';
这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。

3、字符串：
  多行字符串：用反引号 ` ... ` 表示；
  模板字符串：要把多个字符串连接起来，可以用+号连接；
  操作字符串：toUpperCase大写；toLowerCase小写；indexOf会搜索指定字符串出现的位置；substring返回指定索引区间的子串；

4、数组
  JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素。要取得Array的长度，直接访问length属性，
请注意，直接给Array的length赋一个新的值会导致Array大小的变化。  

  indexOf：与String类似，Array也可以通过indexOf()来搜索一个指定的元素的位置。

  slice：slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array；
如果不给slice()传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个Array。

  push和pop：push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉。

  unshift和shift：如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉。

  sort：sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序。

  reverse：reverse()把整个Array的元素给掉个个，也就是反转。

  splice：splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素。
  
  concat：concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array。

  join：join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串。

  多维数组：如果数组的某个元素又是一个Array，则可以形成多维数组。

5、对象
JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。
访问属性是通过.操作符完成的。
由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性 delete。
如果我们要检测xiaoming是否拥有某一属性，可以用in操作符。
要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法。

6、条件判断
JavaScript使用if () { ... } else { ... }来进行条件判断。
多行条件判断：如果还要更细致地判断条件，可以使用if(){ ... }else if(){ ... }else{ ... }

7、循环
JavaScript的循环有两种，一种是for循环，通过初始条件、结束条件和递增条件来循环执行语句块。
for循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来。
for循环在已知循环的初始和结束条件时非常有用。而上述忽略了条件的for循环容易让人看不清循环的逻辑，此时用while循环更佳。
最后一种循环是do { ... } while()循环，它和while循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件。


8、Map和Set
Map：
Map是一组键值对的结构，具有极快的查找速度。
初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法：
var m = new Map(); // 空Map
m.set('Adam', 67); // 添加新的key-value
m.set('Bob', 59);
m.has('Adam'); // 是否存在key 'Adam': true
m.get('Adam'); // 67
m.delete('Adam'); // 删除key 'Adam'
m.get('Adam'); // undefined

Set：
Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。
要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set。
通过add(key)方法可以添加元素到Set中。
通过delete(key)方法可以删除元素。

Map和Set是ES6标准新增的数据类型。

9、iterable
遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。
具有iterable类型的集合可以通过新的for ... of循环来遍历。
更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。
//Array
var a = ['A', 'B', 'C'];
a.forEach(function (element, index, array) {
    // element: 指向当前元素的值
    // index: 指向当前索引
    // array: 指向Array对象本身
    console.log(element + ', index = ' + index);
});

//Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身
var s = new Set(['A', 'B', 'C']);
s.forEach(function (element, sameElement, set) {
    console.log(element);
});

//Map的回调函数参数依次为value、key和map本身
var m = new Map([[1, 'x'], [2, 'y'], [3, 'z']]);
m.forEach(function (value, key, map) {
    console.log(value);
});


三 . 函数

1、定义函数

方法一：
function abs(x) {
    if (x >= 0) {
        return x;
    } else {
        return -x;
    }
}

方法二：
var abs = function (x) {
    if (x >= 0) {
        return x;
    } else {
        return -x;
    }
};
在这种方式下，function (x) { ... }是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量abs，
所以，通过变量abs就可以调用该函数。上述两种定义完全等价，注意第二种方式按照完整语法需要在函数体末尾
加一个;，表示赋值语句结束。

2、调用函数
调用函数时，按顺序传入参数即可。
由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数。
传入的参数比定义的少也没有问题。

arguments：
JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。
arguments类似Array但它不是一个Array。

rest参数：
function foo(a, b, ...rest) {
    console.log('a = ' + a);
    console.log('b = ' + b);
    console.log(rest);
}

foo(1, 2, 3, 4, 5);
// 结果:
// a = 1
// b = 2
// Array [ 3, 4, 5 ]

foo(1);
// 结果:
// a = 1
// b = undefined
// Array []

小心return语句：
function foo() {
    return
        { name: 'foo' };
}

foo(); // undefined
要小心了，由于JavaScript引擎在行末自动添加分号的机制，上面的代码实际上变成了：

function foo() {
    return; // 自动添加了分号，相当于return undefined;
        { name: 'foo' }; // 这行语句已经没法执行到了
}

3、变量作用域与解构赋值
在JavaScript中，用var申明的变量实际上是有作用域的。
如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量。
如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响。
由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行。
如果内部函数和外部函数的变量名重名怎么办？JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义
了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。

变量提升：
JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部。

全局作用域：
不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用
域的变量实际上被绑定到window的一个属性。
JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，
最后如果在全局作用域中也没有找到，则报ReferenceError错误。

名字空间：
全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，
并且很难被发现。减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。
由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的。为了解决块级作用域，
ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量。

常量：
由于var和let申明的是变量，如果要申明一个常量，在ES6之前是不行的，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”。
var PI = 3.14;
ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域。
const PI = 3.14;

解构赋值：
从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。
var [x, y, z] = ['hello', 'JavaScript', 'ES6']。
如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性。

使用场景：
解构赋值在很多时候可以大大简化代码。例如，交换两个变量x和y的值，可以这么写，不再需要临时变量：
var x=1, y=2;
[x, y] = [y, x]

快速获取当前页面的域名和路径：
var {hostname:domain, pathname:path} = location;

使用解构赋值可以减少代码量，但是，需要在支持ES6解构赋值特性的现代浏览器中才能正常运行。
目前支持解构赋值的浏览器包括Chrome，Firefox，Edge等


================================================================================================================
javaScript中定义类或对象的五种方式总结
--------------------------------------------------------------------
第一种方式：工厂方法
能创建并返回特定类型的对象的工厂函数（factory function）。
function createCar(sColor){ 
var oTempCar = new Object; 
oTempCar.color = sColor; 
oTempCar.showColor = function (){ 
alert(this.color); 
}; 
return oTempCar; 
} 
var oCar1 = createCar(); 
var oCar2 = createCar(); 
调用此函数时，将创建新对象，并赋予它所有必要的属性。使用此方法将创建car对象的两个版本（oCar1和oCar2），他们的属性完全一样。

使用此方法存在的问题：
1、语义上看起来不像使用带有构造函数的new运算符那么正规。
2、使用这种方式必须创建对象的方法。每次调用createCar()，都要创建showColor()，意味着每个对象都有自己的showColor()版本，事实上，每个对象都共享了同一个函数。
有些开发者在工厂函数外定义对象的方法，然后通过属性指向该方法。从而避免这个问题： 
function createCar(sColor){ 
var oTempCar = new Object; 
oTempCar.color = sColor; 
oTempCar.showColor = showColor; 
return oTempCar; 
} 
function showColor(){ 
console.log(this.color); 
}
在这段重写的代码中，在函数createCar()前定义了函数showColor()。在createCar()内部，赋予对象一个已经指向已经存在的showColor()函数的指针。
从功能上来讲，这样解决了重复创建对象的问题，但该函数看起来不像对象的方法。
所有这些问题引发了开发者定义的构造函数的出现。


--------------------------------------------------------------------
第二种方式：构造函数方式 
function Car(sColor){ 
this.color = sColor; 
this.showColor = function (){ 
console.log(this.color); 
}; 
} 
var oCar1 = new Car("red"); 
var oCar2 = new Car("blue"); 
你可能已经注意到第一个差别了，在构造函数内部无创建对象，而是使用this关键字。
使用new运算符调用构造函数时，在执行第一行代码前先创建一个对象，只有用this才能访问该对象。
然后可以直接赋予this属性，默认情况下是构造函数的返回值（不必明确使用return运算符）。
这种方式在管理函数方面与工厂方法一样都存在相同的问题。



--------------------------------------------------------------------
第三种方式：原型方式
function Car(){ 
} 
Car.prototype.color = "blue"; 
var oCar1 = new Car(); 
var oCar2 = new Car(); 
调用new Car()时，原型的所有属性都被立即赋予要创建的对象，意味着所有的Car实例存放的都是指向showColor()函数的指针。
从语义上看起来都属于一个对象，因此解决了前面两种方式存在的两个问题。此外使用该方法，还能用instanceof运算符检查给定变量指向的对象类型。因此，下面的代码将输出true：
alert(oCar instanceof Car); //outputs "true"
这个方式看起来很不错，遗憾的是，它并不尽如人意。

1、首先这个构造函数没有参数。使用原型方式时，不能给构造函数传递参数初始化属性的值，因为car1和car2的属性都等于“blue”。

2、真正的问题出现在属性指向的是对象，而不是函数时。函数共享不会造成任何问题，但是对象却很少被多个实例共享的。



--------------------------------------------------------------------
第四种方式：混合的构造函数/原型方式（推荐）
联合使用构造函数和原型方式，就可像用其他程序设计语言一样创建对象。
这种概念非常简单，即用构造函数定义对象的所有非函数属性，用原型方式定义对象的函数属性（方法）。 
function Car(sColor){ 
    this.color =sColor; 
    this.drivers =new Array("Mike","Sue"); 
    } 
    Car.prototype.showColor = function(){ 
    console.log(this.color); 
    } 
    var oCar1 =new Car("red"); 
    var oCar2 =new Car("blue"); 
    oCar1.showColor();
    oCar2.showColor();
    oCar1.drivers.push("Matt"); 
    console.log(oCar1.drivers); //outputs "Mike,Sue,Matt" 
    console.log(oCar2.drivers); //outputs "Mike,Sue" 


--------------------------------------------------------------------
第五种方式：动态原型方式（推荐）
对于习惯使用其他语言的开发者来说，使用混合的构造函数/原型方式感觉不那么和谐。
批评混合的构造函数/原型方式的人认为，在构造函数内找属性，在外部找方法的做法很不合理。
所以他们设计了动态原型方式，以提供更友好的编码风格。
动态原型方法的基本想法与混合的构造函数/原型方式相同，即在构造函数内定义非函数属性，而函数属性则利用原型属性定义。
唯一的区别是赋予对象方法的位置。下面是使用动态原型方法重写的Car类： 
function Car(sColor){ 
this.color =sColor; 
this.drivers =new Array("Mike","Sue"); 
if(typeof Car._initialized == "undefined"){ 
Car.prototype.showColor = function(){ 
console.log(this.color); 
} 
} 
Car._initialized = true; 
} 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%JavaScript中如何定义类？（深度好文）%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
一：定义类并创建类的实例对象
在Javascript中，我们用function来定义类，如下：
function Shape(){
    var x=1;
    var y=2;
}
你或许会说，疑？这个不是定义函数吗？没错，这个是定义函数，我们定义了一个Shape函数，并对x和y进行了初始化。
不过，如果你换个角度来看，这个就是定义一个Shape类，里面有两个属性x和y，初始值分别是1和2，
只不过，我们定义类的关键字是function而不是class。
然后，我们可以创建Shape类的对象aShape，如下：
var aShape = new Shape();

二：定义公有属性和私有属性
我们已经创建了aShape对象，但是，当我们试着访问它的属性时，会出错，如下：
aShape.x=1;
这说明，用var定义的属性是私有的。我们需要使用this关键字来定义公有的属性
function Shape()
{
this.x=1;
this.y=2;
}
这样，我们就可以访问Shape的属性了，如。
aShape.x=2;
好，我们可以根据上面的代码总结得到：用var可以定义类的private属性，而用this能定义类的public属性。



三：定义公有方法和私有方法
在Javascript中，函数是Function类的实例，Function间接继承自Object，所以，函数也是一个对象，
因此，我们可以用赋值的方法创建函数，当然，我们也可以将一个函数赋给类的一个属性变量，
那么，这个属性变量就可以称为方法，因为它是一个可以执行的函数。代码如下：
function Shape()
{
var x=0;
var y=1;
this.draw=function()
{
//print;
};
}
我们在上面的代码中定义了一个draw，并把一个function赋给它，
下面，我们就可以通过aShape调用这个函数，OOP中称为公有方法，如：
function Shape()
{
var x=0;
var y=1;
var draw=function()
{
//print;
};
}


四：构造函数
Javascript并不支持OOP，当然也就没有构造函数了，不过，我们可以自己模拟一个构造函数，让对象被创建时自动调用，代码如下：
function Shape()
{
var init = function()
{
//构造函数代码
};
init();
}
在Shape的最后，我们人为的调用了init函数，那么，在创建了一个Shape对象是，init总会被自动调用，可以模拟我们的构造函数了。



五：带参数的构造函数
如何让构造函数带参数呢？其实很简单，将要传入的参数写入函数的参数列表中即可，如
function Shape(ax,ay)
{
var x=0;
var y=0;
var init = function()
{
//构造函数
x=ax;
y=ay;
};
init();
}
这样，我们就可以这样创建对象：
var aShape = new Shape(0,1);



六：静态属性和静态方法
在Javascript中如何定义静态的属性和方法呢？如下所示：
function Shape(ax,ay)
{
var x=0;
var y=0;
var init = function()
{
//构造函数
x=ax;
y=ay;
};
init();
}
Shape.count=0;//定义一个静态属性count，这个属性是属于类的，不是属于对象的。
Shape.staticMethod=function(){
    console.log("111111111");
};//定义一个静态的方法

var shape = new Shape();
console.log(shape.count); // 输出 undefined

Shape.staticMethod(); // 输出111111111
shape.staticMethid(); // 错误

有了静态属性和方法，我们就可以用类名来访问它了，如下：
alert ( aShape.count );
aShape.staticMethod();
注意：静态属性和方法都是公有的，目前为止，我不知道如何让静态属性和方法变成私有的


七：在方法中访问本类的公有属性和私有属性
在类的方法中访问自己的属性，Javascript对于公有属性和私有属性的访问方法有所不同，请大家看下面的代码：
function Shape(ax,ay)
{
var x=0; // 私有属性
var y=0;
this.gx=0; // 公有属性
this.gy=0;
var init = function()
{
x=ax;//访问私有属性，直接写变量名即可
y=ay;
this.gx=ax;//访问公有属性，需要在变量名前加上this.
this.gy=ay;
};
init();
}


八：this的注意事项
根据笔者的经验，类中的this并不是一直指向我们的这个对象本身的，主要原因还是因为Javascript并不是OOP语言，
而且，函数和类均用function定义，当然会引起一些小问题。
this指针指错的场合一般在事件处理上面，我们想让某个对象的成员函数来响应某个事件，当事件被触发以后，
系统会调用我们这个成员函数，但是，传入的this指针已经不是我们本身的对象了，当然，这时再在成员函数中调用this当然会出错了。
解决方法是我们在定义类的一开始就将this保存到一个私有的属性中，以后，我们可以用这个属性代替this。
我用这个方法使用this指针相当安全，而且很是省心～
我们修改一下代码，解决this问题。对照第七部分的代码看，你一定就明白了
function Shape(ax,ay)
{
var _this=this; //把this保存下来，以后用_this代替this，这样就不会被this弄晕了
var x=0;
var y=0;
_this.gx=0;
_this.gy=0;
var init = function()
{
x=ax;//访问私有属性，直接写变量名即可
y=ay;
_this.gx=ax;//访问公有属性，需要在变量名前加上this.
_this.gy=ay;
};
init();
}

"JavaScript this决策树"（非严格模式下）
==================================================================================================
                        是------> this指向新创建的对象                                           =
                                                                                                 =
                                                                                                 =
                                                                                                 = 
函数是否用new进行调用？                                                                          =   
                                                          是-------->this 指向dot(.)前的对象     =       
                                                                                                 =      
                                                                                                 =                                                                
                        否------> 函数是否用dot(.)进行调用                                       =   
                                                                                                 =
                                                                                                 =
                                                          否-------->this 指向全局对象window     =
==================================================================================================

例子：
var point = { 
 x : 0, 
 y : 0, 
 moveTo : function(x, y) { 
     this.x = this.x + x; 
     this.y = this.y + y; 
     } 
 };
//决策树解释：point.moveTo(1,1)函数不是new进行调用，进入否决策，
//是用dot(.)进行调用，则指向.moveTo之前的调用对象，即point
point.moveTo(1,1); //this 绑定到当前对象,即point对象

　　point.moveTo（）函数在 "JavaScript this决策树"中进行判定的过程是这样的：

　　1）point.moveTo函数调用是用new进行调用的么？这个明显不是，进入“否”分支，即函数是否用dot(.)进行调用？；

　　2）point.moveTo函数是用dot(.)进行调用的，即进入“是”分支，即这里的this指向point.moveTo中.之前的对象point;

-------------------------------------------------------------------------------------------------------------------
function func(x) { 
 this.x = x; 
 } 
func(5); //this是全局对象window，x为全局变量
//决策树解析：func()函数是用new进行调用的么？为否，进入func()函数是用dot进行调用的么？为否，则 this指向全局对象window
x;//x => 5
注意的是 node.js中是没有window这个对象的

-------------------------------------------------------------------------------------------------------------------
var point = { 
 x : 0, 
 y : 0, 
 moveTo : function(x, y) { 
     // 内部函数
     var moveX = function(x) { 
     this.x = x;//this 指向什么？window
    }; 
    // 内部函数
    var moveY = function(y) { 
    this.y = y;//this 指向什么？window
    }; 
    moveX(x); 
    moveY(y); 
    } 
 }; 
 point.moveTo(1,1); 
 point.x; //=>0 
 point.y; //=>0 
 x; //=>1 
 y; //=>1

point.moveTo(1,1)函数实际内部调用的是moveX()和moveY()函数, moveX()函数内部的this在 "JavaScript this决策树"中进行判定的过程是这样的：
　　1）moveX(1)函数调用是用new进行调用的么？这个明显不是，进入“否”分支，即函数是否用dot(.)进行调用？；
　　2）moveX(1)函数不是用dot(.)进行调用的，即进入“否”分支，即这里的this指向全局变量window，那么this.x实际上就是window.x;


---------------------------------------------------------------------------------------------------------------------
下面看一下作为构造函数调用的例子：
function Point(x,y){ 
    this.x = x; // this ?
    this.y = y; // this ?
 }
var np=new Point(1,1);
np.x;//1
var p=Point(2,2);
p.x;//error, p是一个空对象undefined
window.x;//2
Point(1,1)函数在var np=new Point(1,1)中的this在 "JavaScript this决策树"中进行判定的过程是这样的：
　　1）var np=new Point(1,1)调用是用new进行调用的么？这个明显是，进入“是”分支，即this指向np；
　　2）那么this.x=1，即np.x=1；
　　Point(2,2)函数在var p= Point(2,2)中的this在 "JavaScript this决策树"中进行判定的过程是这样的：
　　1）var p= Point(2,2)调用是用new进行调用的么？这个明显不是，进入“否”分支，即函数是否用dot(.)进行调用？；
　　2）Point(2,2)函数不是用dot(.)进行调用的？判定为否，即进入“否”分支，即这里的this指向全局变量window，那么this.x实际上就是window.x;
　　3）this.x=2即window.x=2.



----------------------------------------------------------------------------------------------------------------------
最后看一下函数用call 和apply进行调用的例子：
function Point(x, y){ 
    this.x = x; 
    this.y = y; 
    this.moveTo = function(x, y){ 
        this.x = x; 
        this.y = y; 
    } 
 } 

var p1 = new Point(0, 0); 
var p2 = {x: 0, y: 0}; 
p1.moveTo.apply(p2, [10, 10]);//apply实际上为p2.moveTo(10,10)
p2.x//10
p1.moveTo.apply(p2,[10,10])函数在 "JavaScript this决策树"中进行判定的过程是这样的：
　　我们知道，apply 和 call 这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即 this 绑定的对象。
    p1.moveTo.apply(p2,[10,10])实际上是p2.moveTo(10,10)。那么p2.moveTo(10,10)可解释为：
　　1）p2.moveTo(10,10)函数调用是用new进行调用的么？这个明显不是，进入“否”分支，即函数是否用dot(.)进行调用？；
　　2）p2.moveTo(10,10)函数是用dot(.)进行调用的，即进入“是”分支，即这里的this指向p2.moveTo(10,10)中.之前的对象p2,所以p2.x=10;

call 和 apply 

        语法	                                     定义	                                                     说明
call(thisObj，Object)	      调用一个对象的一个方法，以另一个对象替换当前对象。	call 方法可以用来代替另一个对象调用一个方法。
                                                                                call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象.
                                                                                如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj

apply(thisObj，[argArray])    应用某一对象的一个方法，用另一个对象替换当前对象。	如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。
                                                                                如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数

关于JavaScript函数执行环境的过程，IBM developerworks文档库中的一段描述感觉很不错，摘抄如下：

　　“JavaScript 中的函数既可以被当作普通函数执行，也可以作为对象的方法执行，这是导致 this 含义如此丰富的主要原因。
一个函数被执行时，会创建一个执行环境（ExecutionContext），函数的所有的行为均发生在此执行环境中，构建该执行环境时，
JavaScript 首先会创建 arguments变量，其中包含调用函数时传入的参数。接下来创建作用域链。然后初始化变量，首先初始化函数的形参表，
值为 arguments变量中对应的值，如果 arguments变量中没有对应值，则该形参初始化为 undefined。如果该函数中含有内部函数，则初始化这些内部函数。
如果没有，继续初始化该函数内定义的局部变量，需要注意的是此时这些变量初始化为 undefined，其赋值操作在执行环境（ExecutionContext）创建成功后，
函数执行时才会执行，这点对于我们理解 JavaScript 中的变量作用域非常重要，鉴于篇幅，我们先不在这里讨论这个话题。最后为 this变量赋值，如前所述，
会根据函数调用方式的不同，赋给 this全局对象，当前对象等。至此函数的执行环境（ExecutionContext）创建成功，函数开始逐行执行，
所需变量均从之前构建好的执行环境（ExecutionContext）中读取。”
　　理解这段话对于理解Javascript函数将大有好处。

一句话：this指向当前方法的调用者　





=========================================================================================================================
JavaScript中原型对象与原型链的概念详解：
测试代码：
function Person(name, age, work) {
    this.name = name;
    this.age = age;
    this.work = work;
}
Person.prototype.show = function () {
    console.log(this.name);
}
var person = new Person('赵一鸣', 23, 'WEB前端开发');
console.log(person.__proto__ === Person.prototype);//true

一、原型指针__proto__：
在JavaScript中，每个对象都拥有一个原型对象，而指向该原型对象的内部指针则是__proto__,通过它可以从中继承原型对象的属性，
原型是JavaScript中的基因链接，有了这个，才能知道这个对象的祖祖辈辈。从对象中的__proto__可以访问到他所继承的原型对象。
console.log(person.__proto__===Person.prototype)//true
上面的代码说明对象person的原型指向了Person.prototype。
而Person.prototype也是一个对象（在JavaScript中万物皆为对象，可以简单这样理解），所以它的原型也有具体执行，例如下面的代码：
console.log(Person.prototype.__proto__);//Object
构造函数的原型指向是对象Object。这就说了明了，Person本身也是继承自Object的，那么Object的原型指向的是谁呢？看下面的代码：
console.log(person.__proto__.__proto__.__proto__);//null

所以说，JavaScript中的对象，追根溯源都是来自一个null对象。
除了使用.__proto__方式访问对象的原型，还可以通过Object.getPrototypeOf方法来获取对象的原型，以及通过Object.setPrototypeOf方法来重写对象的原型 。
值得注意的是，按照语言标准，__proto__属性只有浏览器才需要部署，其他环境可以没有这个属性，而且前后的两根下划线，表示它本质是一个内部属性，不应该对使用者暴露。
因此，应该尽量少用这个属性，而是用Object.getPrototypeof和Object.setPrototypeOf，进行原型对象的读写操作。
这里用__proto__属性来描述对象中的原型，是因为这样来得更加形象，且容易理解。


二、JavaScript原型对象prototype：
在JavaScript中，构造函数也是一个对象，所以它也有对象指针，拿上面的例子来说，如下代码：
console.log(Person.__proto__===Function.prototype);//true
函数实例除了拥有__proto__属性之外，还拥有prototype属性。通过该函数构造的新的实例对象，其原型指针__proto__会指向该函数的prototype属性。
而函数的prototype属性，本身是一个由Object构造的实例对象。


三、JavaScript原型链的概念：
原型链作为实现继承的主要方法，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。
每个构造函数都有一个原型对象(prototype)，原型对象都包含一个指向构造函数的指针(constructor)，而实例都包含一个指向原型对象的内部指针(proto)。



// 测试定义成员函数的时候能否从外部传入参数
function func(){
    var _this = this;
    _this.x = 1;
    _this.y = 2 ;
}

func.prototype.show = function(m,n,p,q){
    var _this = this;
    console.log(m);
    console.log(n);
    console.log(p);
    console.log(q);
    console.log(_this.x);
    console.log(_this.y);

};

var f = new func();
f.show(1,2,3,4);

// 闭包
什么是闭包？这就是闭包！
有权访问另一个函数作用域内变量的函数都是闭包。
闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！
另外使用闭包也要注意变量的值是否符合你的要求，因为他就像一个静态私有变量一样。闭包通常会跟很多东西混搭起来，接触多了才能加深理解，这里只是开个头说说基础性的东西。
JS里的function能访问它们的：
　　1. 参数
　　2. 局部变量或函数
　　3. 外部变量（环境变量？），包括
3.1 全局变量，包括DOM。
3.2 外部函数的变量或函数。
　　如果一个函数访问了它的外部变量，那么它就是一个闭包。
　　注意，外部函数不是必需的。通过访问外部变量，一个闭包可以维持（keep alive）这些变量。在内部函数和外部函数的例子中，外部函数可以创建局部变量，并且最终退出；
但是，如果任何一个或多个内部函数在它退出后却没有退出，那么内部函数就维持了外部函数的局部数据。
In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.
从技术上来讲，在JS中，每个function都是闭包，因为它总是能访问在它外部定义的数据。
Since scope-defining construction in Javascript is a function, not a code block like in many other languages, 
what we usually mean by closure in Javascript is a fuction working with nonlocal variables defined in already executed surrounding function.
闭包是从用户角度考虑的一种设计概念，它基于对上下文的分析，把龌龊的事情、复杂的事情和外部环境交互的事情都自己做了，留给用户一个很自然的接口。

闭包的作用
闭包常常用来「间接访问一个变量」。换句话说，「隐藏一个变量」。

假设我们在做一个游戏，在写其中关于「还剩几条命」的代码。
如果不用闭包，你可以直接用一个全局变量：

window.lives = 30 // 还有三十条命
这样看起来很不妥。万一不小心把这个值改成 -1 了怎么办。所以我们不能让别人「直接访问」这个变量。怎么办呢？

用局部变量。

但是用局部变量别人又访问不到，怎么办呢？

暴露一个访问器（函数），让别人可以「间接访问」。
function foo(flag) {
    var local = 1;
    function aar() {
        local++;
        console.log(local);
        return local
    }

    function bar() {
        local++;
        console.log(local);
        return local
    }

    function car() {
        local++;
        console.log(local);
        return local
    }

    function dar() {
        local++;
        console.log(local);
        return local
    }
    if(flag === 1){
        return aar;
    } else if(flag === 2){
        return bar;
    } else if(flag === 3){
        return car;
    } else{
        return dar;
    }
}

var func1 = foo(1);
func1();
func1();
func1();
console.log('--------------------');
var func2 = foo(2);
func2();
func2();
func2();
console.log('--------------------');
var func3 = foo(3);
func3();
func3();
func3();
console.log('--------------------');
var func4 = foo(4);
func4();
func4();
func4();










