使用Github
网站：https://www.bilibili.com/video/av10475153/?from=search&seid=17879713197967167307

一、目的：借助Github 托管代码

二、基本概念：
  1. 仓库（Repository）

  2. 收藏（Star）

  3. 复制克隆项目（Fork）

  4. 发起请求（Pull Request）

  5. 关注（Watch）：关注项目，当项目更新时可以接收通知；

  6. 事务卡片（Issue）：发现代码Bug，但是目前还没有成型的代码，需要讨论时用；

  7. Github 主页

  8. 仓库主页

  9、个人主页

三、注册账号
  脚下留心： 1. 翻墙软件（Shadowsocks） 2.私有库是收费的


四、创建仓库


五、仓库管理
  添加文件
  删除文件

六、搜索仓库 快捷键：T（大小写都可以）


七、Github issues：所有bug或者说交流的问题列表


八、Github实战
Github主页------>仓库主页------>个人主页
收藏：git1 感觉 git2 的test仓库感觉不错 点击Stars进行收藏。
关注：git1 关注 git2 时，git2 有更新 git1 会收到消息。
Fork：git1 fork git2 的仓库后，会自己生成一个一模一样的仓库，这是一个独立存在的仓库（复制/克隆）。
发起请求：git1 做了某些修改,然后向git2发起请求；git2查看请求，觉得是否Merge pull request（将更新的文件添加到原仓库）。
事物卡片：
 1.新建Issue：提交使用问题或者建议或者想法
 2.Pull Request 
   步骤：1）fork项目
         2）修改自己仓库的项目代码
         3）发起Pull Request
         4）等待原作者审核

九、Git 安装和使用
目的：通过git管理Github托管项目代码

下载安装
 Git Bash：命令行模式
 Git GUI： 图形界面

Git 工作流程：
              Git工作区 Working Directory（添加、编辑、修改文件等动作）
    --------->Git暂存区（暂存已经修改的文件最后统一提交到git仓库中）
    --------->Git仓库区 Repository（最终确定的文件保存到仓库，成为一个新版本，并且对他人可见）

---------------------------------------------------------------------------------------------------------------------------------------------------
              Git工作区                 |               Git暂存区                     |              Git仓库区                   |      远端
---------------------------------------------------------------------------------------------------------------------------------------------------
        git status                                    git status                                    git status
        git add hello.cpp         ------------>   git commit -m "提交描述"       ------------>      git push               ------------>                                                   
        git add test.cpp                                                                                                                        
---------------------------------------------------------------------------------------------------------------------------------------------------

Git 初始化及仓库创建和操作：
 基本信息设置
   1. 设置用户名：git config --global user.name 'AifiHenryMa'
   2. 设置用户邮箱：git config --global user.email 'iloveicRazavi@gmail.com'
   脚下留情：该设置在Github仓库主页显示谁提交了该文件
   git config --list 查看配置信息


==========================Git本地操作=========================
 初始化一个新的Git仓库
  添加文件
   1. 创建文件夹：mkdir test
   2. 在文件夹内初始化git（创建git仓库）：
      cd test
      git init （test目录下出现一个.git文件夹）
   3. 向仓库中添加文件
      touch hello.cpp
      git status（查看文件状态）
   
   4. 添加到暂存区
      git add hello.cpp
      git status

   5. 将文件从暂存区提交到仓库
      git commit -m 'add hello.cpp'
      git status（显示 working tree clean）

  修改仓库文件
      vi hello.cpp
      git status（显示 modified:   hello.cpp）
      git add hello.cpp
      git commit -m 'add hello.cpp'
      git commit -m '第一次修改hello.cpp并提交'

  删除仓库文件
      7.1 删除文件：rm hello.cpp
      7.2 从Git中删除文件：git rm hello.cpp
      7.3 提交操作：git commit -m '第一次删除hello.cpp并提交' 


 
==========================Git管理远端仓库=========================
目的：备份；实现代码的共享和集中管理

 Git 克隆操作
   目的：将远程仓库（Github对应的项目）复制到本地
   代码：git clone https://github.com/AifiHenryMa/userApi.git

 将本地仓库同步到Git远程仓库中
   1、创建文件：touch a2.cpp
   2、添加到暂存区：git add a2.cpp
   3、添加到本地仓库：git commit -m '第二次通过git 提交到仓库'
   4、添加到远程仓库：git push （会弹出用户登录页面 输入用户名和密码就可以啦）
 
 思考：为何无法同步？
 或没有权限
 The requested URL returned error:403 Forbidden while accessing
 答案：私有项目，没有权限，输入用户名密码，或者远程地址采用这种类型：
 vi .git/config
 
 # 将
[remote "origin"]
	url = https://github.com/用户名/仓库名.git
 修改为：
[remote "origin"]
	url = https://github.com/用户名：密码@github.com/用户名/仓库名.git

#url = https://github.com/AifiHenryMa：mht19921123@github.com/AifiHenryMa/userApi.git


git支持https和git两种传输协议，github分享链接时会有两种协议可选。
  1.git协议链接；
  2.https协议链接；
git使用https协议，每次pull, push都会提示要输入密码，使用git协议，然后使用ssh密钥，这样免去每次都输密码的麻烦。

初次使用git的用户要使用git协议大概需要三个步骤：
一、生成密钥对
二、设置远程仓库（本文以github为例）上的公钥
三、把git的 remote url 修改为git协议（以上两个步骤初次设置过以后，以后使用都不需要再次设置，此步骤视以后项目的remote url而定，如果以后其他项目的协议为https则需要此步骤）

第一步：生成秘钥对 
大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。
生成公钥的过程在所有操作系统上都差不多。首先你要确认一下本机是否已经有一个公钥。
Windows上采用如下方式：
    ssh-keygen -t rsa -C "iloveicRazavi@gmail.com"
    之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。

第二步：添加公钥到你的远程仓库（github）
 1、查看你生成的公钥：
$ cat /c/Users/AIFI/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0X6L1zLL4VHuvGb8aJH3ippTozmReSUzgntvk434aJ/v7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8vR3c8E7CjZN733f5AL8uEYJA+YZevY5UCvEg+umT7PHghKYaJwaCxV7sjYP7Z6V79OMCEAGDNXC26IBMdMgOluQjp6o6j2KAdtRBdCDS/QIU5THQDxJ9lBXjk1fiq9tITo/aXBvjZeD+gH/Apkh/0GbO8VQLiYYmNfqqAHHeXdltORn8N7C9lOa/UW3KM7QdXo6J0GFlBVQeTE/IGqhMS5PMln3 admin@admin-PC
2、登陆你的github帐户。点击你的头像，然后 Settings -> 左栏点击 SSH and GPG keys -> 点击 New SSH key
3、然后你复制上面的公钥内容，粘贴进“Key”文本域内。 title域，自己随便起个名字。
4、点击 Add key。
完成以后，验证下这个key是不是正常工作：
$ ssh -T git@github.com
Attempts to ssh to github
如果，看到：
Hi xxx! You've successfully authenticated, but GitHub does not # provide shell access.
恭喜你，你的设置已经成功了。
  
第三步：修改git的remote url（这一步感觉没什么卵用）
使用命令 git remote -v 查看你当前的 remote url
$ git remote -v
origin https://github.com/someaccount/someproject.git (fetch)
origin https://github.com/someaccount/someproject.git (push)
如果是以上的结果那么说明此项目是使用https协议进行访问的（如果地址是git开头则表示是git协议）

你可以登陆你的github，就像本文开头的图例，你在上面可以看到你的ssh协议相应的url，类似：
复制此ssh链接，然后使用命令 git remote set-url 来调整你的url。
git remote set-url origin git@github.com:someaccount/someproject.git
然后你可以再用命令 git remote -v 查看一下，url是否已经变成了ssh地址。
然后你就可以愉快的使用git fetch, git pull , git push，再也不用输入烦人的密码了


===========================================Github搭建个人网站==============================================
个人站点
  访问：https://用户名.github.io

  搭建步骤：
  1. 创建个人站点  -> 新建仓库（注：仓库名必须是【用户名.github.io】）（https://aifihenryma.github.io/）
  2. 在仓库下新建index.html
  脚下留心：
  1. github pages 仅支持静态网页
  2. 仓库里面只能是.html文件


Project page 站点
  访问：https://用户名.github.io/仓库名（https://aifihenryma.github.io/userApi/）
  搭建步骤：
  1. 进入项目主页，点击settings
  2. 在settings页面，点击【Launch automatic page generator】按钮
  点击后会打开一个网站编辑页面。
  我们可以用Markdown写我们网站的内容，当然如果你的ReadMe写的好话，直接点击Load README.md就自动生成了网站内容。
  最后点击网站右下角的Continue to layouts去选择网站的模板后确定就立刻生成网站内容了，而且有项目下载连接等，非常人性化。

================================================================================================================
Git 时光穿梭机
  要随时掌握工作区的状态，使用git status命令。
  如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

  


Git 分支管理
  Git鼓励大量使用分支：
  查看分支：git branch
  创建分支：git branch <name>
  切换分支：git checkout <name>
  创建+切换分支：git checkout -b <name> 
  合并某分支到当前分支：git merge <name>
  删除分支：git branch -d <name>




